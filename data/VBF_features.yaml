# This can be used on both the mlp and deepak8
# contrary to ParticleNet, it only requires features, and coordinates
treename:
    AnalysisTree
selection:
    ### use `&`, `|`, `~` for logical operations on numpy arrays
    ### can use functions from `math`, `np` (numpy), and `awkward` in the expression

new_variables:
    ### [format] name: formula
    ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
    is_bkg: np.logical_not(m_is_VBF)

preprocess:
    ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
    method: manual
    ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
    data_fraction: 

inputs:
    pf_features:
        length: 100
        vars: 
        ### [format 1]: var_name (no transformation)
        ### [format 2]: [var_name, 
        ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto), 
        ###              multiply_by(optional, default=1), 
        ###              clip_min(optional, default=-5), 
        ###              clip_max(optional, default=5), 
        ###              pad_value(optional, default=0)]
            - PF_pt
            - PF_eta
            - PF_phi
            - PF_energy
            - PF_pdgid
            - PF_charge
            - VBFjet_pt
            - VBFjet_eta
            - VBFjet_phi
            - VBFjet_energy
            - nonVBFjet_pt
            - nonVBFjet_eta
            - nonVBFjet_phi
            - nonVBFjet_energy

labels:
    ### type can be `simple`, `custom`
    ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
    type: simple
    value: [
        m_is_VBF, is_bkg
        ]
    ### [option 2] otherwise use `custom` to define the label, then `value` is a map
    # type: custom
    # value: 
        # target_mass: np.where(fj_isQCD, fj_genjet_sdmass, fj_gen_mass) 

observers:
