# This can be used to run ParticleNet
# pf_points are the variables used as coordinates in the first EdgeConv Block
# pf_features are the variables used as features in the first EdgeConv Block
treename:
    AnalysisTree
selection:
    ### use `&`, `|`, `~` for logical operations on numpy arrays
    ### can use functions from `math`, `np` (numpy), and `awkward` in the expression

new_variables:
    ### [format] name: formula
    ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
    pf_mask: ak.ones_like(PF_UE_pt)
    is_signal : m_is_VBF
    is_bkg: np.logical_not(m_is_VBF)
    PF_UE_energy_log: np.log(PF_UE_energy)
    PF_UE_pt_log: np.log(PF_UE_pt)

preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction:

inputs:
    pf_points:
        length: 100
        vars:
            - PF_UE_eta
            - PF_UE_phi
    pf_features:
        length: 100
        vars:
        ### [format 1]: var_name (no transformation)
        ### [format 2]: [var_name,
        ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto),
        ###              multiply_by(optional, default=1),
        ###              clip_min(optional, default=-5),
        ###              clip_max(optional, default=5),
        ###              pad_value(optional, default=0)]
            - PF_UE_pt
            - PF_UE_eta
            - PF_UE_phi
            - PF_UE_energy
            - PF_UE_pdgid
            - PF_UE_charge
            - PF_UE_puppiweight
            - PF_UE_energy_log
            - PF_UE_pt_log

    pf_mask:
        length: 100
        vars:
            - pf_mask

labels:
    ### type can be `simple`, `custom`
    ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
    type: simple
    value: [
        is_signal, is_bkg
        ]
    ### [option 2] otherwise use `custom` to define the label, then `value` is a map
    # type: custom
    # value:
        # target_mass: np.where(fj_isQCD, fj_genjet_sdmass, fj_gen_mass)

observers:
    - m_eventCategory
    - m_n_PF_jet1
    - m_n_PF_jet2
    - m_n_PF_UE_charged
    - m_n_PF_UE_neutral
    - m_n_nonVBF_jets
    - m_HT_nonVBF_jets
    - m_mjj
    - m_Zeppenfeld
    - m_Zeppenfeld_charged
    - m_Zeppenfeld_neutral
    - m_energy_density_ratio
    - m_energy_density_ratio_charged
    - m_energy_density_ratio_neutral

# weights:
   ### [option 1] use precomputed weights stored in the input files
   # use_precomputed_weights: true
   # weight_branches: [weight, class_weight]
   ### [option 2] compute weights on-the-fly using reweighting histograms
